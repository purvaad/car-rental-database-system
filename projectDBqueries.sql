-- 1.Calculate the total revenue per car type and location(BG-generate reports on revenue generated per location and car)
--This query groups the data by car type and location to calculate the total revenue generated per car type and location. This helps in understanding which car types and locations are the most profitable.
COLUMN Location_name FORMAT A20
COLUMN Car_type FORMAT A15
COLUMN Total_Revenue FORMAT 999,999,999.00

select l.Location_name, c.Car_type, sum(t.Total_cost) as Total_Revenue
from Fall24_S003_T1_Rental_Location l
join Fall24_S003_T1_Cars c on l.Location_id = c.Location_id
join Fall24_S003_T1_Transaction_For_By t on c.Car_id = t.Car_id
group by l.Location_name, c.Car_type
order by Total_Revenue desc;


-- 2. Calculate the average rental duration for each car type.
--  This query calculates the average rental duration per car type to assess demand patterns and optimize pricing strategies.
COLUMN Car_type FORMAT A20
COLUMN Average_Rental_Duration FORMAT 999.99

select c.Car_type, AVG(t.Duration) as Average_Rental_Duration
from Fall24_S003_T1_Cars c
join Fall24_S003_T1_Transaction_For_By t on c.Car_id = t.Car_id
group by c.Car_type
order by Average_Rental_Duration desc;



-- 3. Calculate revenue per car model and filter by cars with average ratings above 4.
--This query calculates the revenue per car model, filtering the results to include only those with an average customer feedback rating above 4. This helps to assess which cars are both popular and profitable.
COLUMN Car_model FORMAT A20
COLUMN Total_Revenue FORMAT 999,999,999.00
COLUMN Avg_Feedback_Rating FORMAT 99.99

SELECT c.Car_model, SUM(t.Total_cost) AS Total_Revenue, AVG(f.Rating) AS Avg_Feedback_Rating
FROM Fall24_S003_T1_Cars c
JOIN Fall24_S003_T1_Transaction_For_By t ON c.Car_id = t.Car_id
JOIN Fall24_S003_T1_Feedback_about_Car f ON c.Car_id = f.Car_id
GROUP BY c.Car_model
HAVING AVG(f.Rating) > 4
ORDER BY Total_Revenue DESC;


-- 4. Analyze monthly rental trends by car type using ROLLUP to get subtotals and grand totals.The ROLLUP clause is used to generate subtotals for each car type and month, as well as a grand total for all months. This helps in analyzing trends and understanding overall performance.
--This query provides monthly rental trends for each car type, including total rentals per month and grand totals across all months.
COLUMN Car_model FORMAT A20
COLUMN Total_Revenue FORMAT 999,999,999.00
COLUMN Avg_Feedback_Rating FORMAT 99.99

select to_char(t.Start_date, 'YYYY-MM') as Rental_Month, c.Car_type, count(t.Car_id) as Rentals_Count
from Fall24_S003_T1_Transaction_For_By t
join Fall24_S003_T1_Cars c on t.Car_id = c.Car_id
group by ROLLUP(to_char(t.Start_date, 'YYYY-MM'
), c.Car_type)
order by Rental_Month desc, Rentals_Count desc;




-- 5.Analyze revenue per employee, with subtotals for combinations of employee, location, and car type.
-- This query calculates the revenue generated by each employee, considering different combinations of location and car type. The CUBE clause will provide a full summary of the total revenue, including subtotals for combinations of location and car type.
COLUMN Employee_name FORMAT A20
COLUMN Location_name FORMAT A20
COLUMN Car_type FORMAT A15
COLUMN Total_Revenue FORMAT 999,999,999.00

select e.Employee_name, 
    coalesce(l.Location_name, 'No Location') as Location_name, 
    coalesce(c.Car_type, 'No Car Type') as Car_type, 
    sum(t.Total_cost) as Total_Revenue
from Fall24_S003_T1_Employee e
join Fall24_S003_T1_Rental_Location l on e.Location_id = l.Location_id
join Fall24_S003_T1_Cars c on l.Location_id = c.Location_id
join Fall24_S003_T1_Transaction_For_By t on c.Car_id = t.Car_id
group by cube(e.Employee_name, l.Location_name, c.Car_type)
having e.Employee_name is not null and l.Location_name is not null and c.Car_type is not null 
order by Total_Revenue desc;
    



-- 6.Calculate the running total of rental costs for each customer. OVER clause is used here to calculate the cumulative total of rental costs for each customer. 
--This helps in tracking spending behavior over time.
COLUMN Customer_name FORMAT A20
COLUMN Total_cost FORMAT 999,999.00
COLUMN Running_Total_Spend FORMAT 999,999,999.00

select cu.Customer_name, t.Total_cost,
       sum(t.Total_cost) over (partition by cu.Customer_id order by t.Start_date) as Running_Total_Spend
from Fall24_S003_T1_Transaction_For_By t
join Fall24_S003_T1_Customer cu on t.Customer_id = cu.Customer_id
order by cu.Customer_name, t.Start_date;




-- 7.To directly identify customers eligible for special offers, filter for those who meet a spending threshold or have a high number of rentals.
-- (Filter High-Spending or Frequent Customers for Targeted Campaigns)

COLUMN Customer_name FORMAT A20
COLUMN Preferred_Car_Type FORMAT A20
COLUMN Total_Rentals FORMAT 9999
COLUMN Running_Total_Spend FORMAT 999,999,999.00

select Customer_name, Preferred_Car_Type, Total_Rentals, Running_Total_Spend
from (
    select cu.Customer_name, cu.Preferred_Car_Type, 
           count(t.Car_id) over (partition by cu.Customer_id) as Total_Rentals,
           sum(t.Total_cost) over (partition by cu.Customer_id order by t.Start_date) as Running_Total_Spend
    from Fall24_S003_T1_Transaction_For_By t
    join Fall24_S003_T1_Customer cu on t.Customer_id = cu.Customer_id
)
where Running_Total_Spend > 500  
order by Customer_name;

-- 8. gives avg number of rentals per car for each location and availability status
-- avg revenue per car (total revenue for all rentals divided by the number of cars available) for each loc and availability status
SELECT l.Location_name, lc.Car_Availability,
    COUNT(DISTINCT lc.Car_id) as total_cars,
    COUNT(t.Car_id) as total_rentals,
    ROUND(COUNT(t.Car_id) * 100.0 / COUNT(DISTINCT lc.Car_id), 2) as rentals_per_car,
    ROUND(SUM(COALESCE(t.Total_cost, 0)) / COUNT(DISTINCT lc.Car_id), 2) as avg_revenue_per_car
FROM Fall24_S003_T1_Loc_Has_Car lc
JOIN Fall24_S003_T1_Rental_Location l ON lc.Location_id = l.Location_id
LEFT JOIN Fall24_S003_T1_Transaction_For_By t ON lc.Car_id = t.Car_id
GROUP BY l.Location_name, lc.Car_Availability
ORDER BY l.Location_name, lc.Car_Availability;








